//
//  ClockHand.swift
//  MyClock
//
//  Created by sb on 13-A-21.
//  Copyright Â© 2021 tukgaesoft. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class ClockHand : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawSecondHand(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 90), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 90)


        //// Color Declarations
        let color2 = UIColor(red: 1.000, green: 0.500, blue: 0.000, alpha: 1.000)

        //// path Drawing
        let pathPath = UIBezierPath()
        pathPath.move(to: CGPoint(x: 0, y: -3.84))
        pathPath.addCurve(to: CGPoint(x: -4, y: 0.16), controlPoint1: CGPoint(x: -2.21, y: -3.84), controlPoint2: CGPoint(x: -4, y: -2.05))
        pathPath.addCurve(to: CGPoint(x: 0, y: 4.16), controlPoint1: CGPoint(x: -4, y: 2.37), controlPoint2: CGPoint(x: -2.21, y: 4.16))
        pathPath.addCurve(to: CGPoint(x: 4, y: 0.16), controlPoint1: CGPoint(x: 2.21, y: 4.16), controlPoint2: CGPoint(x: 4, y: 2.37))
        pathPath.addCurve(to: CGPoint(x: 3.78, y: -1.14), controlPoint1: CGPoint(x: 4, y: -0.3), controlPoint2: CGPoint(x: 3.92, y: -0.74))
        pathPath.addCurve(to: CGPoint(x: 0, y: -3.84), controlPoint1: CGPoint(x: 3.24, y: -2.71), controlPoint2: CGPoint(x: 1.75, y: -3.84))
        pathPath.close()
        pathPath.move(to: CGPoint(x: 1.75, y: -75.76))
        pathPath.addCurve(to: CGPoint(x: 3.5, y: -30.42), controlPoint1: CGPoint(x: 1.75, y: -75.22), controlPoint2: CGPoint(x: 2.17, y: -47.35))
        pathPath.addCurve(to: CGPoint(x: 7, y: -0.08), controlPoint1: CGPoint(x: 4.66, y: -15.55), controlPoint2: CGPoint(x: 7, y: -2.1))
        pathPath.addCurve(to: CGPoint(x: 0, y: 7), controlPoint1: CGPoint(x: 7, y: 4.25), controlPoint2: CGPoint(x: 3.5, y: 7))
        pathPath.addCurve(to: CGPoint(x: -7, y: -0.08), controlPoint1: CGPoint(x: -3.5, y: 7), controlPoint2: CGPoint(x: -7, y: 4.25))
        pathPath.addCurve(to: CGPoint(x: -3.5, y: -30.42), controlPoint1: CGPoint(x: -7, y: -2.1), controlPoint2: CGPoint(x: -4.66, y: -15.55))
        pathPath.addCurve(to: CGPoint(x: -1.75, y: -75.76), controlPoint1: CGPoint(x: -2.17, y: -47.35), controlPoint2: CGPoint(x: -1.75, y: -75.22))
        pathPath.addCurve(to: CGPoint(x: -0.18, y: -77.93), controlPoint1: CGPoint(x: -1.75, y: -76.71), controlPoint2: CGPoint(x: -1.09, y: -77.8))
        pathPath.addCurve(to: CGPoint(x: 0, y: -77.94), controlPoint1: CGPoint(x: -0.12, y: -77.94), controlPoint2: CGPoint(x: -0.06, y: -77.94))
        pathPath.addCurve(to: CGPoint(x: 1.75, y: -75.76), controlPoint1: CGPoint(x: 1, y: -77.94), controlPoint2: CGPoint(x: 1.75, y: -76.77))
        pathPath.close()
        color2.setFill()
        pathPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawMinuteHand(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 90), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 90)


        //// Color Declarations
        let color2 = UIColor(red: 1.000, green: 0.500, blue: 0.000, alpha: 1.000)
        let color3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// path Drawing
        context.saveGState()
        context.translateBy(x: -0, y: -0.01)

        let pathPath = UIBezierPath()
        pathPath.move(to: CGPoint(x: 0, y: -4.26))
        pathPath.addCurve(to: CGPoint(x: -4, y: -0.26), controlPoint1: CGPoint(x: -2.21, y: -4.26), controlPoint2: CGPoint(x: -4, y: -2.47))
        pathPath.addCurve(to: CGPoint(x: 0, y: 3.74), controlPoint1: CGPoint(x: -4, y: 1.95), controlPoint2: CGPoint(x: -2.21, y: 3.74))
        pathPath.addCurve(to: CGPoint(x: 4, y: -0.26), controlPoint1: CGPoint(x: 2.21, y: 3.74), controlPoint2: CGPoint(x: 4, y: 1.95))
        pathPath.addCurve(to: CGPoint(x: 3.73, y: -1.71), controlPoint1: CGPoint(x: 4, y: -0.77), controlPoint2: CGPoint(x: 3.91, y: -1.26))
        pathPath.addCurve(to: CGPoint(x: 0, y: -4.26), controlPoint1: CGPoint(x: 3.15, y: -3.2), controlPoint2: CGPoint(x: 1.7, y: -4.26))
        pathPath.close()
        pathPath.move(to: CGPoint(x: 2, y: -66.23))
        pathPath.addCurve(to: CGPoint(x: 4, y: -30.84), controlPoint1: CGPoint(x: 2, y: -65.7), controlPoint2: CGPoint(x: 2.68, y: -47.76))
        pathPath.addCurve(to: CGPoint(x: 7, y: -0.5), controlPoint1: CGPoint(x: 5.17, y: -15.97), controlPoint2: CGPoint(x: 7, y: -2.52))
        pathPath.addCurve(to: CGPoint(x: 0, y: 6.58), controlPoint1: CGPoint(x: 7, y: 3.83), controlPoint2: CGPoint(x: 3.5, y: 6.58))
        pathPath.addCurve(to: CGPoint(x: -7, y: -0.5), controlPoint1: CGPoint(x: -3.5, y: 6.58), controlPoint2: CGPoint(x: -7, y: 3.83))
        pathPath.addCurve(to: CGPoint(x: -4, y: -30.84), controlPoint1: CGPoint(x: -7, y: -2.52), controlPoint2: CGPoint(x: -5.16, y: -15.97))
        pathPath.addCurve(to: CGPoint(x: -2, y: -66.23), controlPoint1: CGPoint(x: -2.67, y: -47.77), controlPoint2: CGPoint(x: -2, y: -65.7))
        pathPath.addCurve(to: CGPoint(x: -0.18, y: -68.4), controlPoint1: CGPoint(x: -2, y: -67.18), controlPoint2: CGPoint(x: -1.11, y: -68.28))
        pathPath.addCurve(to: CGPoint(x: 0, y: -68.42), controlPoint1: CGPoint(x: -0.12, y: -68.41), controlPoint2: CGPoint(x: -0.06, y: -68.42))
        pathPath.addCurve(to: CGPoint(x: 2, y: -66.23), controlPoint1: CGPoint(x: 1, y: -68.42), controlPoint2: CGPoint(x: 2, y: -67.25))
        pathPath.close()
        color3.setFill()
        pathPath.fill()
        color2.setStroke()
        pathPath.lineWidth = 1
        pathPath.stroke()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHourHand(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 90), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 90)


        //// Color Declarations
        let color2 = UIColor(red: 1.000, green: 0.500, blue: 0.000, alpha: 1.000)
        let color3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// path Drawing
        let pathPath = UIBezierPath()
        pathPath.move(to: CGPoint(x: 0, y: -4.31))
        pathPath.addCurve(to: CGPoint(x: -4, y: -0.31), controlPoint1: CGPoint(x: -2.2, y: -4.31), controlPoint2: CGPoint(x: -4, y: -2.52))
        pathPath.addCurve(to: CGPoint(x: 0, y: 3.69), controlPoint1: CGPoint(x: -4, y: 1.89), controlPoint2: CGPoint(x: -2.2, y: 3.69))
        pathPath.addCurve(to: CGPoint(x: 4, y: -0.31), controlPoint1: CGPoint(x: 2.21, y: 3.69), controlPoint2: CGPoint(x: 4, y: 1.89))
        pathPath.addCurve(to: CGPoint(x: 3.59, y: -2.08), controlPoint1: CGPoint(x: 4, y: -0.95), controlPoint2: CGPoint(x: 3.86, y: -1.55))
        pathPath.addCurve(to: CGPoint(x: 0, y: -4.31), controlPoint1: CGPoint(x: 2.94, y: -3.41), controlPoint2: CGPoint(x: 1.58, y: -4.31))
        pathPath.close()
        pathPath.move(to: CGPoint(x: 2.23, y: -42.67))
        pathPath.addCurve(to: CGPoint(x: 4, y: -22.87), controlPoint1: CGPoint(x: 2.33, y: -41.82), controlPoint2: CGPoint(x: 2.68, y: -39.8))
        pathPath.addCurve(to: CGPoint(x: 7, y: -0.55), controlPoint1: CGPoint(x: 5.17, y: -8), controlPoint2: CGPoint(x: 7, y: -2.57))
        pathPath.addCurve(to: CGPoint(x: 0, y: 6.53), controlPoint1: CGPoint(x: 7, y: 3.77), controlPoint2: CGPoint(x: 3.5, y: 6.53))
        pathPath.addCurve(to: CGPoint(x: -7, y: -0.55), controlPoint1: CGPoint(x: -3.5, y: 6.53), controlPoint2: CGPoint(x: -7, y: 3.77))
        pathPath.addCurve(to: CGPoint(x: -4, y: -22.86), controlPoint1: CGPoint(x: -7, y: -2.57), controlPoint2: CGPoint(x: -5.16, y: -7.99))
        pathPath.addCurve(to: CGPoint(x: -2.15, y: -42.67), controlPoint1: CGPoint(x: -2.67, y: -39.79), controlPoint2: CGPoint(x: -2.25, y: -41.76))
        pathPath.addCurve(to: CGPoint(x: 0.04, y: -44.79), controlPoint1: CGPoint(x: -1.95, y: -44.28), controlPoint2: CGPoint(x: -0.96, y: -44.79))
        pathPath.addCurve(to: CGPoint(x: 2.23, y: -42.67), controlPoint1: CGPoint(x: 0.69, y: -44.79), controlPoint2: CGPoint(x: 2.04, y: -44.28))
        pathPath.close()
        color3.setFill()
        pathPath.fill()
        color2.setStroke()
        pathPath.lineWidth = 1
        pathPath.stroke()
        
        context.restoreGState()

    }




    @objc(ClockHandResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
